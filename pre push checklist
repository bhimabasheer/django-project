1. Pull Latest Changes

Â· Always pull the latest changes before pushing:

2. Use Proper Branch Names

Â· Follow this naming convention:

Feature feature/checkout-promo-code

Bugfix bugfix/login-crash-fix

Hotfix hotfix/payment-timeout

Chore chore/update-dependencies


3. Check for Unnecessary Files

Â· Donâ€™t commit: .pyc, .log, .DS_Store, .env, .history/, etc.

Â· Ensure .gitignore is properly respected.

4. Write Clear Commit Messages

Follow this format:

<type>: <short summary> [optional body]

Example:

Â· feat â€“ New feature

Â· fix â€“ Bug fix

Â· refactor â€“ Code refactoring (no feature or bug fix)

Â· docs â€“ Documentation change

Â· test â€“ Adding or updating tests

Â· chore â€“ Other changes (CI, build scripts, etc.)

5. Security & Secrets

1. Never commit passwords, API keys, or .env files.

2. Use environment variables instead.

6. Migration Files Check

Â· Open the shared migration log Excel: docs/migrations_log.xlsx

Â· Ensure no duplicate migration file name or number exists for your app.

Â· If you're adding a new migration:

o Run:

python manage.py makemigrations <app_name>

o Then add a new entry to the Excel sheet with:

Â§ App Name

Â§ Migration File Name

7. Code Practices

ðŸ”¹ Clean Code Principles

Â· Keep functions small and focused.

Â· Use descriptive variable and function names.

Â· Avoid deep nesting (use early returns).

Â· Avoid hard-coded values; use constants/settings.

ðŸ”¹ Formatting Â· Use Black formatter link

ðŸ”¹ Logging

Â· Use structured logging (e.g., logger.info(), logger.error()).

Â· Donâ€™t use print statements in production code.

Â· Avoid logging sensitive data.
