class ChangePasswordSerializer(serializers.Serializer):
    current_password = serializers.CharField(write_only=True, required=True)
    new_password = serializers.CharField(write_only=True, min_length=8, required=True)
    confirm_password = serializers.CharField(write_only=True, required=True)

    def validate(self, data):
        user = self.context['request'].user

        if not user.check_password(data['current_password']):
            raise serializers.ValidationError({
                'current_password': const.PASSWORD_INCORRECT
            })

        if data['new_password'] == data['current_password']:
            raise serializers.ValidationError({
                'new_password': const.NEW_PASSWORD_SAME_AS_PREVIOUS
            })

        if data['new_password'] != data['confirm_password']:
            raise serializers.ValidationError({
                'confirm_password': const.PASSWORD_MISMATCH
            })

        return data

    def save(self):
        user = self.context['request'].user
        user.set_password(self.validated_data['new_password'])
        user.save()
        return user


class ChangePasswordAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self,request):
        try:
            serializer = ChangePasswordSerializer(data=request.data, context={'request': request})
            if serializer.is_valid():
                serializer.save()
                return Response(success_(response={},message=const.PASSWORD_CHANGED),
                status=status.HTTP_200_OK
                )
            error = serializer.errors
            errors = json.loads(json.dumps(error))

            errors_data = Utils.extract_validation_error(errors)
            return Response(error_(message=errors_data),status=status.HTTP_200_OK)
            
        except Exception as e:
            return Response(error_(message = str(e)),
                status=status.HTTP_400_BAD_REQUEST
            )
