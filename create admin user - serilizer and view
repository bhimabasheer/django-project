class UserCreateSerializer(serializers.ModelSerializer):
    password = serializers.CharField(
        write_only=True,
        required=True,
        style={'input_type': 'password'}
    )
    confirm_password = serializers.CharField(
        write_only=True,
        required=True,
        style={'input_type': 'password'}
    )
    phone = serializers.CharField(required=False)  
    email = serializers.CharField(required=True)
    name = serializers.CharField(write_only=True, required=False)  
    class Meta:
        model = User
        fields = [
            'email', 'phone', 'password', 'confirm_password',
            'name'
        ] 
        extra_kwargs = {
            'password': {'write_only': True},
            'confirm_password': {'write_only': True},
            'email': {'required': True},
            'phone': {'required': False}
        }

    def validate(self, data):
        password = data.get('password')
        confirm_password = data.pop('confirm_password', None)

        if password != confirm_password:
            raise serializers.ValidationError(const.PASSWORD_MISMATCH)

        email = data.get('email')
        phone = data.get('phone')

        if not email and not phone:
            raise serializers.ValidationError(const.EITHER_EMAIL_OR_PHIONE_REQUIRED)

        try:
            
            email_validation = Utils.validate_account_create_identifier(email)
            if email_validation["has_error"]:
                raise serializers.ValidationError(const.INVALID_EMAIL_FORMAT)

           
            phone_validation = Utils.validate_account_create_identifier(phone)
            if phone_validation["has_error"]:
                raise serializers.ValidationError(const.PHONE_NUMBER_LENGTH_NOT_VALID)

        except Exception as e:
            raise serializers.ValidationError(str(e))

        existing_user = User.objects.filter(
        Q(email=email) |
        Q(phone=phone) |
        Q(username=email) |
        Q(username=phone)
        ).first()

        if existing_user:
            if existing_user.email == email:
                raise serializers.ValidationError({'email': const.EMAIL_ALREADY_USED})
            elif existing_user.phone == phone:
                raise serializers.ValidationError({'phone': const.PHONE_ALREADY_TAKEN})
            elif existing_user.username == email:
                raise serializers.ValidationError({'email': const.EMAIL_ALREADY_USED_AS_USERNAME})
            elif existing_user.username == phone:
                raise serializers.ValidationError({'phone': const.PHONE_NUMBER_ALREADY_USED_AS_USERNAME})

        return data
    def create(self, validated_data):
        password = validated_data.pop('password')
        name = validated_data.pop('name', '').strip()

        name_parts = name.split()

        first_name = name_parts[0] if len(name_parts) > 0 else ''
        last_name = ' '.join(name_parts[1:]) if len(name_parts) > 1 else ''

        user = User.objects.create_user(
            username=validated_data.get('email'),
            email=validated_data.get('email'),
            phone=validated_data.get('phone', ''),
            password=password,
            first_name=first_name,
            last_name=last_name,
            is_active=True
        )

        return user







class AdminCreateUserAPIView(APIView):
    permission_classes = [IsAdminUser]

    def post(self, request):
        try:
            serializer = UserCreateSerializer(data=request.data)

            if not serializer.is_valid():

                errors = json.loads(json.dumps(serializer.errors))
                errors_data = Utils.extract_validation_error(errors)

                return Response(
                    error_(
                        message=errors_data,
                        response={},
                    ),
                    status=status.HTTP_200_OK
                )

            user = serializer.save()
            return Response(
                success_(
                    response={},
                    message=const.USER_CREATED_BY_ADMIN
                ),
                status=status.HTTP_200_OK
            )

        except Exception as e:
            return Response(
                error_(
                    message=str(e),
                    response={}
                ),
                status=status.HTTP_200_OK
            )
