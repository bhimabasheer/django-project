import logging
from django.shortcuts import render
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework.views import APIView
from payments.utils import PaymentUtils
from utils.api_response import success_, error_

logger = logging.getLogger(__name__)

class CreatePaymentView(APIView):
    def post(self, request):
        # TODO need to create transaction with initiated status
        plan_id = request.data.get('plan_id')
        if not plan_id:
            return Response(error_(message="'plan_id' is required"), status=status.HTTP_400_BAD_REQUEST)
        url, payload = PaymentUtils.initiate_payment(request)
        return render(request, "payments/payu_redirect.html", {"url": url, "params": payload})


# class PayuSuccessUrlView(APIView):
#     permission_classes = [AllowAny]
#
#     def get(self, request):
#         txnid = request.GET.get('txnid')
#         if not txnid:
#             logger.warning("PayU success callback received without txnid")
#             return Response(
#                 error_(message="'txnid' is required"),
#                 status=status.HTTP_400_BAD_REQUEST
#             )
#
#         logger.info(f"Processing PayU success callback for txnid: {txnid}")
#         return PaymentUtils.payu_handle_pg_callbacks(txnid, request)
#
#     def post(self, request):
#         txnid = request.data.get('txnid') or request.POST.get('txnid')
#         if not txnid:
#             logger.warning("PayU success callback received without txnid")
#             return Response(
#                 error_(message="'txnid' is required"),
#                 status=status.HTTP_400_BAD_REQUEST
#             )
#
#         logger.info(f"Processing PayU success POST callback for txnid: {txnid}")
#         return PaymentUtils.payu_handle_pg_callbacks(txnid, request)
#
#
# class PayuFailedUrlView(APIView):
#     permission_classes = [AllowAny]
#
#     def get(self, request):
#         txnid = request.GET.get('txnid')
#         if not txnid:
#             logger.warning("PayU failure callback received without txnid")
#             return Response(
#                 error_(message="'txnid' is required"),
#                 status=status.HTTP_400_BAD_REQUEST
#             )
#
#         logger.info(f"Processing PayU failure callback for txnid: {txnid}")
#         return PaymentUtils.payu_handle_pg_callbacks(txnid, request)
#
#     def post(self, request):
#         txnid = request.data.get('txnid') or request.POST.get('txnid')
#         if not txnid:
#             logger.warning("PayU failure callback received without txnid")
#             return Response(
#                 error_(message="'txnid' is required"),
#                 status=status.HTTP_400_BAD_REQUEST
#             )
#
#         logger.info(f"Processing PayU failure POST callback for txnid: {txnid}")
#         return PaymentUtils.payu_handle_pg_callbacks(txnid, request)

class PayuPaymentStatusCheckView(APIView):
    def post(self, request):
        txnid = request.data.get('txnid')
        if not txnid:
            return Response({"error": "txnid is required"}, status=status.HTTP_400_BAD_REQUEST)
        payment_status_resp = PaymentUtils.payu_payment_status_check(txnid)
        return Response(success_(message="Payu transaction status", response=payment_status_resp), status=status.HTTP_200_OK)


class PayuCallbackUrlView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        txnid = request.GET.get('txnid')
        if not txnid:
            logger.warning("PayU success callback received without txnid")
            return Response(
                error_(message="'txnid' is required"),
                status=status.HTTP_400_BAD_REQUEST
            )

        logger.info(f"Processing PayU success callback for txnid: {txnid}")
        return PaymentUtils.payu_handle_pg_callbacks(txnid, request)

    def post(self, request):
        txnid = request.data.get('txnid') or request.POST.get('txnid')
        if not txnid:
            logger.warning("PayU success callback received without txnid")
            return Response(
                error_(message="'txnid' is required"),
                status=status.HTTP_400_BAD_REQUEST
            )

        logger.info(f"Processing PayU success POST callback for txnid: {txnid}")
        return PaymentUtils.payu_handle_pg_callbacks(txnid, request)
