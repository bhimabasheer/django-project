@staticmethod
    def get_personality_list(request):
        search = request.GET.get('search', '').strip()
        personality_qs = Personality.objects.filter(status=Personality.Status.ACTIVE)

        if search:
            personality_qs = personality_qs.filter(name__icontains=search)

        personality_list = []
        for p in personality_qs:
            icon_url = request.build_absolute_uri(p.icon.url) if p.icon else None
            personality_list.append({
                "id": p.id,
                "name": p.name,
                "personality_type": p.personality_type,
                "icon": icon_url
            })

        type_mapping = dict(Personality.PersonalityType.choices)
        grouped = defaultdict(list)
        for item in personality_list:
            grouped[item['personality_type']].append({
                "id": item["id"],
                "name": item["name"],
                "icon": item["icon"]
            })

        result = []
        for type_value, items in grouped.items():
            result.append({
                "category_name": type_mapping.get(type_value, "Unknown"),
                "personalities": items
            })

        return result




class PersonalityList(APIView):
    permission_classes = [] 

    def get(self, request):
        try:
           
            response_data = Utils.get_personality_list(request=request)
            message = "Personalities list fetched successfully"
            return Response(success_(response=response_data, message=message),
                            status=status.HTTP_200_OK)
        except Exception as e:
            import traceback
            print(traceback.format_exc())
            return Response(error_(message=str(e)), status=status.HTTP_400_BAD_REQUEST)
