import hashlib
import logging
from django.shortcuts import render
from django.utils import timezone
import phpserialize
import requests
from django.conf import settings
from django.db import transaction
from payments.models import Transaction
from subscriptions.models import Plan, UserPlan, PlanStatus, UserPlanLog
from datetime import timedelta
logger = logging.getLogger(__name__)


class PaymentUtils:
    @staticmethod
    def initiate_payment(request):
        with transaction.atomic():
            plan = Plan.objects.get(pk=request.data.get('plan_id'))
            amount = plan.amount
            tnx = Transaction.objects.create(
                user=request.user,
                plan=plan,
                status=Transaction.PaymentStatus.PAYMENT_STATUS_INITIATED,
                amount=amount,
                currency='INR',
            )
            if settings.PAYU_IS_LIVE:
                url = settings.PAYU_CHECKOUT_LIVE_URL
            else:
                url = settings.PAYU_CHECKOUT_TEST_URL
            key = settings.PAYU_SECRET_KEY
            salt = settings.PAYU_SALT

            txnid = tnx.ref
            user = request.user
            # success_url = request.build_absolute_uri(f"/api/payments/payu/success/?txnid={txnid}")
            # failure_url = request.build_absolute_uri(f"/api/payments/payu/failure/?txnid={txnid}")
            success_url = request.build_absolute_uri(f"/api/payments/payu/callback/?txnid={txnid}")
            failure_url = request.build_absolute_uri(f"/api/payments/payu/callback/?txnid={txnid}")

            hash_params = {
                "key": key,
                "txnid": txnid,
                "amount": amount,
                "productinfo": plan.name,
                "firstname": user.first_name,
                "email": user.email or "test@admin.com",
                "udf1": "", "udf2": "", "udf3": "", "udf4": "", "udf5": "",
                "udf6": "", "udf7": "", "udf8": "", "udf9": "", "udf10": ""
            }
            hash_value = PaymentUtils.generate_hash_create(hash_params, salt)
            payload = {
                "key": key,
                "txnid": txnid,
                "amount": amount,
                "productinfo": plan.name,
                "firstname": user.first_name,
                "email": user.email or "test@admin.com",
                "phone": user.phone or "9496610524",
                "hash": hash_value,
                "surl": success_url,
                "furl": failure_url,
                "lastname": user.last_name,
                "address1": user.address,
                "service_provider": "payu_paisa",
            }

            return url, payload


    @staticmethod
    def generate_hash_create(params, salt):
        hash_seq = (
            f"{params['key']}|{params['txnid']}|{params['amount']}|{params['productinfo']}|"
            f"{params['firstname']}|{params['email']}|{params['udf1']}|{params['udf2']}|{params['udf3']}|"
            f"{params['udf4']}|{params['udf5']}|{params['udf6']}|{params['udf7']}|{params['udf8']}|"
            f"{params['udf9']}|{params['udf10']}|{salt}"
        )
        return hashlib.sha512(hash_seq.encode("utf-8")).hexdigest().lower()

    @staticmethod
    def payu_payment_status_check(txnid):
        if settings.PAYU_IS_LIVE:
            url = settings.PAYU_STATUS_LIVE_URL
        else:
            url = settings.PAYU_STATUS_TEST_URL
        key = settings.PAYU_SECRET_KEY
        salt = settings.PAYU_SALT

        payload = {
            "key": key,
            "command": "verify_payment",
            "var1": txnid,
        }

        hash_value = PaymentUtils.generate_hash_status_check(payload, salt)
        payload["hash"] = hash_value

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }

        response = requests.post(url, data=payload, headers=headers)
        # parsed_response = PaymentUtils.parse_raw_text_to_json(response.text)
        # getting data is raw text
        # return parsed_response
        return response.json()

    @staticmethod
    def generate_hash_status_check(params, salt):
        hash_seq = f"{params['key']}|{params['command']}|{params['var1']}|{salt}"
        return hashlib.sha512(hash_seq.encode("utf-8")).hexdigest().lower()

    @staticmethod
    def parse_raw_text_to_json(raw_text):

        def decode(obj):
            if isinstance(obj, dict):
                return {decode(k): decode(v) for k, v in obj.items()}
            elif isinstance(obj, list) or isinstance(obj, tuple):
                return [decode(i) for i in obj]
            elif isinstance(obj, bytes):
                try:
                    return obj.decode("utf-8")
                except Exception:
                    return obj
            else:
                return obj

        try:
            parsed = phpserialize.loads(raw_text.encode("utf-8"))
            parsed_dict = decode(parsed)
            print("Parsed:", parsed_dict)
            return parsed_dict
        except Exception as e:
            print("Parsing error:", e)
            return {"error": "Failed to parse PayU response", "raw": raw_text}

    @staticmethod
    def payu_validate_payment_and_update(txnid, transaction_details):
        if not txnid or not transaction_details:
            return False, "Invalid transaction ID or details"

        with transaction.atomic():
            try:
                txn = Transaction.objects.select_for_update().get(
                    ref=txnid,
                    status=Transaction.PaymentStatus.PAYMENT_STATUS_INITIATED
                )
            except Transaction.DoesNotExist:
                logger.error(f"Transaction not found for txnid: {txnid}")
                return False, "Transaction not found or already processed"

            txn.pg_ref_id = transaction_details.get("mihpayid")

            payment_status = transaction_details.get("status", "").lower()
            if payment_status == "success":
                txn.status = Transaction.PaymentStatus.PAYMENT_STATUS_SUCCESS
            elif payment_status == "failure":
                txn.status = Transaction.PaymentStatus.PAYMENT_STATUS_FAILED
            else:
                logger.warning(f"Unknown payment status: {payment_status} for txnid: {txnid}")
                txn.status = Transaction.PaymentStatus.PAYMENT_STATUS_FAILED

            txn.save(update_fields=["pg_ref_id", "status", "updated_at"])

            # create user plan only for successful payments
            if txn.status == Transaction.PaymentStatus.PAYMENT_STATUS_SUCCESS:
                try:
                    current_time = timezone.now()
                    start_date = current_time

                    old_user_plan = UserPlan.objects.filter(
                        user=txn.user,
                        status=PlanStatus.ACTIVE,
                        end_date__gte=current_time,
                    ).first()

                    if old_user_plan:
                        # extend from the old plan's end date
                        end_date = old_user_plan.end_date + timedelta(days=txn.plan.duration)

                        # remaining contact views + new plan contact views
                        remaining_contacts = old_user_plan.contact_view_limit or 0
                        contact_view_limit = remaining_contacts + (txn.plan.contact_view_limit or 0)

                        # deactivate old plan
                        old_user_plan.status = PlanStatus.INACTIVE
                        old_user_plan.save()

                        logger.info(f"Extending plan until {end_date} with {contact_view_limit} total contacts")
                    else:
                        end_date = start_date + timedelta(days=txn.plan.duration)
                        contact_view_limit = txn.plan.contact_view_limit or 0

                    days_remaining = (end_date - start_date).days

                    existing_plan = UserPlan.objects.filter(
                        user=txn.user,
                        transaction_id=txn.id
                    ).exists()

                    if not existing_plan:
                        user_plan = UserPlan.objects.create(
                            user=txn.user,
                            plan=txn.plan,
                            payment_mode="PAYU PG",
                            payment_date=timezone.now(),
                            payment_amount=txn.amount,
                            transaction_id=txn.id,
                            plan_data=txn.plan.attributes_to_array(),
                            days_remaining=days_remaining,
                            status=PlanStatus.ACTIVE,
                            start_date=start_date,
                            end_date=end_date,
                            contact_view_limit=contact_view_limit,
                        )
                        txn.user_plan = user_plan
                        txn.save()

                        old_plan_data = old_user_plan.attributes_to_array() if old_user_plan else None
                        new_plan_data = user_plan.attributes_to_array()
                        transaction_data = txn.attributes_to_array()

                        UserPlanLog.objects.create(
                            user=txn.user,
                            old_plan=old_user_plan,
                            old_user_plan_data=old_plan_data,
                            new_plan=user_plan,
                            new_user_plan_data=new_plan_data,
                            transaction=txn,
                            transaction_data=transaction_data
                        )

                        logger.info(
                            f"UserPlan created for successful transaction: {txnid} with {contact_view_limit} contacts and {days_remaining} days")
                        logger.info(f"UserPlanLog created for transaction: {txnid}")
                    else:
                        logger.warning(f"UserPlan already exists for transaction: {txnid}")

                except Exception as e:
                    logger.error(f"Error creating UserPlan for txnid {txnid}: {str(e)}")
                    txn.status = Transaction.PaymentStatus.PAYMENT_STATUS_FAILED
                    txn.save(update_fields=["status", "updated_at"])
                    return False, "Payment successful but plan activation failed"

                return True, "Payment processed successfully"
            else:
                logger.info(f"Payment failed for transaction: {txnid}")
                return False, "Payment was not successful"

    @staticmethod
    def payu_handle_pg_callbacks(txnid, request):

        try:
            # Get payment status from PayU
            payment_status_resp = PaymentUtils.payu_payment_status_check(txnid)

            if not payment_status_resp or "transaction_details" not in payment_status_resp:
                logger.error(f"Invalid payment status response for txnid: {txnid}")
                return render(request, "payments/payu_redirect_failure.html", {
                    'txnid': txnid,
                    'error_message': 'Unable to verify payment status'
                })

            transaction_details = payment_status_resp["transaction_details"]
            if txnid not in transaction_details:
                logger.error(f"Transaction details not found for txnid: {txnid}")
                return render(request, "payments/payu_redirect_failure.html", {
                    'txnid': txnid,
                    'error_message': 'Transaction details not found'
                })

            # Validate and update payment
            success, message = PaymentUtils.payu_validate_payment_and_update(
                txnid, transaction_details[txnid]
            )

            if success:
                return render(request, "payments/payu_redirect_success.html", {
                    'txnid': txnid,
                    'message': message
                })
            else:
                return render(request, "payments/payu_redirect_failure.html", {
                    'txnid': txnid,
                    'error_message': message
                })

        except Exception as e:
            logger.error(f"Error handling PayU callback for txnid {txnid}: {str(e)}")
            return render(request, "payments/payu_redirect_failure.html", {
                'txnid': txnid,
                'error_message': 'An error occurred while processing payment'
            })
