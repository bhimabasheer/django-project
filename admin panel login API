from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate, get_user_model
from django.core.exceptions import PermissionDenied
from admin_panel.account.serializers import AdminLoginSerializer
from admin_panel.account.validators import AdminAccountValidator
from utils.api_response import success_, error_
from utils.helpers import Utils  
from click_for_marry import constants as const
import json
from rest_framework.permissions import AllowAny

User = get_user_model()

class AdminLoginView(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        try:
            serializer = AdminLoginSerializer(data=request.data)
            if not serializer.is_valid():
                error = serializer.errors
                errors = json.loads(json.dumps(error))
                errors_data = Utils.extract_validation_error(errors)
                return Response(error_(message=errors_data), status=status.HTTP_200_OK)

            username_or_email = serializer.validated_data['username_or_email']
            password = serializer.validated_data['password']

            user = authenticate(username=username_or_email, password=password)

            if not user:
                try:
                    user_obj = User.objects.get(email=username_or_email)
                    user = authenticate(username=user_obj.username, password=password)
                except User.DoesNotExist:
                    return Response(error_(message=const.INVALID_CREDENTIALS), status=status.HTTP_401_UNAUTHORIZED)

            AdminAccountValidator.validate_admin_login(user)

            refresh = RefreshToken.for_user(user)
            response_data = {
                "access": str(refresh.access_token),
                "refresh": str(refresh),
                "admin_id": user.id,
                "username": user.username,
                "email": user.email,
            }

            return Response(success_(response=response_data, message=const.ADMIN_LOGIN_SUCCESSFULLY), status=status.HTTP_200_OK)

        except PermissionDenied as e:
            return Response(error_(message=str(e)), status=status.HTTP_403_FORBIDDEN)
        except Exception as e:
            return Response(error_(message=str(e)), status=status.HTTP_400_BAD_REQUEST)



from rest_framework import serializers


class AdminLoginSerializer(serializers.Serializer):
    username_or_email = serializers.CharField()
    password = serializers.CharField(write_only=True)




from rest_framework.exceptions import PermissionDenied
from click_for_marry import constants as const


class AdminAccountValidator:
    @staticmethod
    def validate_admin_login(user):
        if not user:
            raise PermissionDenied(const.INVALID_CREDENTIALS)

        if not user.is_active:
            raise PermissionDenied(const.ACCOUNT_DISABLED)

        if not user.is_staff:
            raise PermissionDenied(const.NOT_AUTHORIZED_ADMIN)

        return True
